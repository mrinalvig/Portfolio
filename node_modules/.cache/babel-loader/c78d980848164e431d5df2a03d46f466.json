{"ast":null,"code":"// Basic GameObject class to represent all on-screen entities\nfunction GameObject(name) {\n  this.name = name; // Simple name identifier\n\n  this.active = true;\n  this.position = new Vector2(0, 0); // Position in world space of object\n\n  this.velocity = new Vector2(0, 0); // Velocity\n\n  this.size = new Vector2(10, 10); // Width and Height of the object\n\n  this.canCollide = true; // Whether the object has collisions\n\n  this.spriteSize = new Vector2(0, 0); // Size of sprite\n\n  this.spriteOff = new Vector2(0, 0); // Offset of sprite from center of object\n\n  this.sprite = new Vector2(0, 0); // Pixels to offset sprite on sheet\n  // Generate the DOM object\n\n  this.elem = document.createElement(\"div\");\n  this.elem.className = \"gameobject\";\n  document.body.appendChild(this.elem);\n\n  if (colBoxes) {\n    this.box = document.createElement(\"div\");\n    this.box.className = \"colBox\";\n    document.body.appendChild(this.box);\n  }\n}\n\n_c = GameObject;\n\nGameObject.prototype.update = function (deltaTime) {}; // Nothing for now\n\n\nGameObject.prototype.collide = function (obj) {// For arrow\n\n  /*if (obj is enemy) {\n  \tdamage enemy\n  \tdelete self\n  }\n  \tif (timer > 3.0f) {\n  \tcreate damage area\n  \tdelete self\n  }*/\n}; // Called when the scaleFact changes\n\n\nGameObject.prototype.resize = function () {\n  this.elem.style.width = scaleFact * this.spriteSize.x + \"px\";\n  this.elem.style.height = scaleFact * this.spriteSize.y + \"px\";\n  this.elem.style.backgroundSize = scaleFact * this.spriteSize.x + \"px \" + scaleFact * this.spriteSize.y + \"px\";\n\n  if (colBoxes) {\n    this.box.style.width = scaleFact * this.size.x - 2 + \"px\";\n    this.box.style.height = scaleFact * this.size.y - 2 + \"px\";\n  }\n}; // Simply update the position of the corresponding element\n\n\nGameObject.prototype.draw = function (deltaTime) {\n  var pos = this.position.sub(camPos);\n  this.elem.style.left = scaleFact * (pos.x + this.spriteOff.x) + \"px\";\n  this.elem.style.top = scaleFact * (pos.y + this.spriteOff.y) + \"px\";\n  this.elem.style.zIndex = Math.floor(this.position.y);\n\n  if (colBoxes) {\n    this.box.style.left = scaleFact * pos.x + \"px\";\n    this.box.style.top = scaleFact * pos.y + \"px\";\n    this.box.style.width = scaleFact * this.size.x - 2 + \"px\";\n    this.box.style.height = scaleFact * this.size.y - 2 + \"px\";\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"GameObject\");","map":{"version":3,"sources":["/Users/mrinalvig/Documents/Projects/Portfolio/src/GameObject.js"],"names":["GameObject","name","active","position","Vector2","velocity","size","canCollide","spriteSize","spriteOff","sprite","elem","document","createElement","className","body","appendChild","colBoxes","box","prototype","update","deltaTime","collide","obj","resize","style","width","scaleFact","x","height","y","backgroundSize","draw","pos","sub","camPos","left","top","zIndex","Math","floor"],"mappings":"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","sourcesContent":["// Basic GameObject class to represent all on-screen entities\nfunction GameObject(name) {\n    this.name = name;                      // Simple name identifier\n\tthis.active = true;\n    this.position = new Vector2(0, 0); // Position in world space of object\n    this.velocity = new Vector2(0, 0); // Velocity\n    this.size = new Vector2(10, 10); // Width and Height of the object\n    this.canCollide = true; // Whether the object has collisions\n\n    this.spriteSize = new Vector2(0, 0); // Size of sprite\n    this.spriteOff = new Vector2(0, 0); // Offset of sprite from center of object\n    this.sprite = new Vector2(0, 0); // Pixels to offset sprite on sheet\n\n    // Generate the DOM object\n\tthis.elem = document.createElement(\"div\");\n\tthis.elem.className = \"gameobject\";\n    document.body.appendChild(this.elem);\n\n    if (colBoxes) {\n        this.box = document.createElement(\"div\");\n        this.box.className = \"colBox\";\n        document.body.appendChild(this.box);\n    }\n}\n\nGameObject.prototype.update = function(deltaTime) {}; // Nothing for now\n\nGameObject.prototype.collide = function(obj) {\n\t// For arrow\n\t/*if (obj is enemy) {\n\t\tdamage enemy\n\t\tdelete self\n\t}\n\n\tif (timer > 3.0f) {\n\t\tcreate damage area\n\t\tdelete self\n\t}*/\n\n}\n\n// Called when the scaleFact changes\nGameObject.prototype.resize = function() {\n    this.elem.style.width = scaleFact * this.spriteSize.x + \"px\";\n    this.elem.style.height = scaleFact * this.spriteSize.y + \"px\";\n    this.elem.style.backgroundSize = scaleFact * this.spriteSize.x + \"px \" + scaleFact * this.spriteSize.y + \"px\";\n\n    if (colBoxes) {\n        this.box.style.width = scaleFact * this.size.x - 2 + \"px\";\n        this.box.style.height = scaleFact * this.size.y - 2 + \"px\";\n    }\n}\n\n// Simply update the position of the corresponding element\nGameObject.prototype.draw = function(deltaTime) {\n    var pos = this.position.sub(camPos);\n    this.elem.style.left = scaleFact * (pos.x + this.spriteOff.x) + \"px\";\n    this.elem.style.top = scaleFact * (pos.y + this.spriteOff.y) + \"px\";\n    this.elem.style.zIndex = Math.floor(this.position.y);\n\n    if (colBoxes) {\n        this.box.style.left = scaleFact * pos.x + \"px\";\n        this.box.style.top = scaleFact * pos.y + \"px\";\n            this.box.style.width = scaleFact * this.size.x - 2 + \"px\";\n            this.box.style.height = scaleFact * this.size.y - 2 + \"px\";\n    }\n}\n"]},"metadata":{},"sourceType":"module"}