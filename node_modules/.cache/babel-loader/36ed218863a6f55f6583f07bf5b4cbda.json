{"ast":null,"code":"function Goblin() {\n  EntityLiving.call(this);\n  this.size = new Vector2(16, 10);\n  this.animator = new Animator(gobAnim, this);\n  this.animator.setAnim(\"idle_down\");\n  this.moveSpeed = 65;\n  this.hurtSound = enemyHit;\n  this.agro = false;\n  this.dir = 0; // Represents the direction\n  // 0 -> down\n  // 1 -> right\n  // 2 -> up\n  // 3 -> left\n} // Inherit from EntityLiving\n\n\n_c = Goblin;\nGoblin.prototype = Object.create(EntityLiving.prototype);\nGoblin.prototype.constructor = Goblin;\n\nGoblin.prototype.resize = function () {\n  this.elem.style.width = scaleFact * this.spriteSize.x + \"px\";\n  this.elem.style.height = scaleFact * this.spriteSize.y + \"px\";\n  this.elem.style.backgroundSize = scaleFact * this.animator.sheet.x + \"px \" + scaleFact * this.animator.sheet.y + \"px\";\n};\n\nGoblin.prototype.collide = function (obj) {\n  if (obj == player) {\n    player.damage(10);\n    var centerCtr = new Vector2(this.position.x + this.size.x / 2, this.position.y + this.size.y / 2);\n    var centerObj = new Vector2(obj.position.x + obj.size.x / 2, obj.position.y + obj.size.y / 2);\n    obj.velocity = centerObj.sub(centerCtr).normalize().mul(400);\n  }\n};\n\nGoblin.prototype.update = function (deltaTime) {\n  var speed = this.moveSpeed;\n  var move = new Vector2(0, 0); // How much the player will move\n\n  var dist = this.position.distance(player.position);\n\n  if (dist > 150) {\n    this.agro = false;\n\n    if (this.dir == 0) {\n      this.animator.setAnim(\"idle_down\");\n    } else if (this.dir == 1) {\n      this.animator.setAnim(\"idle_right\");\n    } else if (this.dir == 2) {\n      this.animator.setAnim(\"idle_up\");\n    } else if (this.dir == 3) {\n      this.animator.setAnim(\"idle_left\");\n    }\n\n    this.animator.play();\n  } else {\n    if (this.agro == false) {\n      enemyChase.play();\n    }\n\n    this.agro = true; // Only play the walking animation if the walk vector isn't 0\n\n    move = player.position.sub(this.position);\n\n    if (move.magnitude() > 0) {\n      var slope = move.y / move.x;\n\n      if (slope > -1 && slope < 1) {\n        if (move.x > 0) {\n          this.animator.setAnim(\"walk_right\");\n          this.dir = 1;\n        } else {\n          this.animator.setAnim(\"walk_left\");\n          this.dir = 3;\n        }\n      } else {\n        if (move.y > 0) {\n          this.animator.setAnim(\"walk_down\");\n          this.dir = 0;\n        } else {\n          this.animator.setAnim(\"walk_up\");\n          this.dir = 2;\n        }\n      }\n    }\n  }\n\n  move = move.normalize(); // Normalize so that diagonal movement isn't faster\n  // We multiply the move vector by the speed and deltaTime\n  // We do deltaTime so that the movement will remain consistent despite frame rate fluctuation\n  // Basically it means we move in units per second, not units per frame\n\n  move = move.mul(speed);\n\n  if (this.immunity <= 0.75) {\n    var diff = move.sub(this.velocity);\n    var accel = 10;\n    var mag = diff.magnitude();\n    if (accel * deltaTime > mag) accel = mag / deltaTime;\n    this.velocity = this.velocity.add(diff.mul(accel * deltaTime)); //this.velocity = move;\n  }\n\n  EntityLiving.prototype.update.call(this, deltaTime);\n};\n\nGoblin.prototype.draw = function (deltaTime) {\n  this.animator.play();\n  this.animator.update(deltaTime, this);\n  this.elem.style.backgroundPosition = -this.sprite.x + \"px \" + -this.sprite.y + \"px\"; // Call the base version of the draw\n\n  EntityLiving.prototype.draw.call(this, deltaTime);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Goblin\");","map":{"version":3,"sources":["/Users/mrinalvig/Documents/Projects/Portfolio/src/Goblin.js"],"names":["Goblin","EntityLiving","call","size","Vector2","animator","Animator","gobAnim","setAnim","moveSpeed","hurtSound","enemyHit","agro","dir","prototype","Object","create","constructor","resize","elem","style","width","scaleFact","spriteSize","x","height","y","backgroundSize","sheet","collide","obj","player","damage","centerCtr","position","centerObj","velocity","sub","normalize","mul","update","deltaTime","speed","move","dist","distance","play","enemyChase","magnitude","slope","immunity","diff","accel","mag","add","draw","backgroundPosition","sprite"],"mappings":"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","sourcesContent":["function Goblin() {\n     EntityLiving.call(this);\n     this.size = new Vector2(16, 10);\n     this.animator = new Animator(gobAnim, this);\n     this.animator.setAnim(\"idle_down\");\n     this.moveSpeed = 65;\n\t this.hurtSound = enemyHit;\n\t this.agro = false;\n\n     this.dir = 0; // Represents the direction\n      // 0 -> down\n      // 1 -> right\n      // 2 -> up\n      // 3 -> left\n}\n\n// Inherit from EntityLiving\nGoblin.prototype = Object.create(EntityLiving.prototype);\nGoblin.prototype.constructor = Goblin;\n\nGoblin.prototype.resize = function() {\n    this.elem.style.width = scaleFact * this.spriteSize.x + \"px\";\n    this.elem.style.height = scaleFact * this.spriteSize.y + \"px\";\n    this.elem.style.backgroundSize = scaleFact * this.animator.sheet.x + \"px \" + scaleFact * this.animator.sheet.y + \"px\";\n}\n\nGoblin.prototype.collide = function(obj) {\n    if (obj == player) {\n        player.damage(10);\n        var centerCtr = new Vector2(this.position.x + this.size.x / 2, this.position.y + this.size.y / 2);\n\t\tvar centerObj = new Vector2(obj.position.x + obj.size.x / 2, obj.position.y + obj.size.y / 2);\n\t\tobj.velocity = centerObj.sub(centerCtr).normalize().mul(400);\n    }\n}\n\nGoblin.prototype.update = function(deltaTime) {\n\t var speed = this.moveSpeed;\n\n\n     var move = new Vector2(0, 0); // How much the player will move\n\n     var dist = this.position.distance(player.position);\n\n     if (dist > 150) {\n\t\t this.agro = false;\n          if (this.dir == 0) {\n              this.animator.setAnim(\"idle_down\");\n          } else if (this.dir == 1) {\n              this.animator.setAnim(\"idle_right\");\n          } else if (this.dir == 2) {\n              this.animator.setAnim(\"idle_up\");\n          } else if (this.dir == 3) {\n              this.animator.setAnim(\"idle_left\");\n          }\n          this.animator.play();\n     } else {\n\t\t if (this.agro == false) {\n\t\t\t enemyChase.play();\n\t\t }\n\t\t this.agro = true;\n\n          // Only play the walking animation if the walk vector isn't 0\n          move = player.position.sub(this.position);\n          if (move.magnitude() > 0) {\n\n              var slope = move.y / move.x;\n              if (slope > -1 && slope < 1) {\n                  if (move.x > 0) {\n       \t\t\t\t   this.animator.setAnim(\"walk_right\");\n                       this.dir = 1;\n                  } else {\n                      this.animator.setAnim(\"walk_left\");\n                      this.dir = 3;\n                  }\n              } else {\n                  if (move.y > 0) {\n       \t\t\t\t   this.animator.setAnim(\"walk_down\");\n                       this.dir = 0;\n                  } else {\n                      this.animator.setAnim(\"walk_up\");\n                      this.dir = 2;\n                  }\n              }\n          }\n     }\n\n     move = move.normalize(); // Normalize so that diagonal movement isn't faster\n\n     // We multiply the move vector by the speed and deltaTime\n     // We do deltaTime so that the movement will remain consistent despite frame rate fluctuation\n     // Basically it means we move in units per second, not units per frame\n     move = move.mul(speed);\n     if(this.immunity <= 0.75) {\n         var diff = move.sub(this.velocity);\n         var accel = 10;\n         var mag = diff.magnitude();\n         if (accel * deltaTime > mag) accel = mag / deltaTime;\n\n        this.velocity = this.velocity.add(diff.mul(accel * deltaTime));\n        //this.velocity = move;\n\n\n    }\n\n     EntityLiving.prototype.update.call(this, deltaTime);\n}\n\nGoblin.prototype.draw = function(deltaTime) {\n    this.animator.play();\n    this.animator.update(deltaTime, this);\n\n \tthis.elem.style.backgroundPosition = -this.sprite.x + \"px \" + -this.sprite.y + \"px\";\n\n    // Call the base version of the draw\n    EntityLiving.prototype.draw.call(this, deltaTime);\n}\n"]},"metadata":{},"sourceType":"module"}