{"ast":null,"code":"// Just checks for collision between two objects\nfunction collides(obj1, obj2) {\n  if (obj1.position.x < obj2.position.x + obj2.size.x && obj1.position.x + obj1.size.x > obj2.position.x && obj1.position.y < obj2.position.y + obj2.size.y && obj1.size.y + obj1.position.y > obj2.position.y) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction phys(obj1, obj2, deltaTime) {\n  // obj1 is the moving object\n  // Save the position before moving it\n  var oldPos = obj1.position; // The amount to move this frame\n\n  var vel = obj1.velocity.mul(deltaTime); // Move the objects\n\n  obj1.position = obj1.position.add(vel);\n  var t1, t2; // Check for collision this frame\n\n  if (collides(obj1, obj2)) {\n    if (oldPos.y >= obj2.position.y + obj2.size.y) {\n      // Check for intersection on lower horiz line\n      var bottom = obj2.position.y + obj2.size.y; // Bottom of obstacle\n\n      var dir = obj1.velocity.normalize(); // Direction of the movement\n      // The distance from oldPos to the collision point\n\n      var t = (bottom - oldPos.y) / dir.y; // Collision point\n\n      var hit = oldPos.add(dir.mul(t)); // Make sure the collision happens on the x axis\n\n      if (hit.x > obj2.position.x - obj1.size.x && hit.x < obj2.position.x + obj2.size.x) {\n        if (t >= 0) t1 = t;\n      }\n    } else if (oldPos.y + obj1.size.y <= obj2.position.y) {\n      //if(obj1 == player) console.log(\"down\");\n      // Check for intersection on upper horiz line\n      var top = obj2.position.y; // top of obstacle\n\n      var dir = obj1.velocity.normalize(); // Direction of the movement\n      // The distance from oldPos to the collision point\n\n      var t = (top - (oldPos.y + obj1.size.y)) / dir.y; // Collision point\n\n      var hit = oldPos.add(dir.mul(t)); // Make sure the collision happens on the x axis\n\n      if (hit.x > obj2.position.x - obj1.size.x && hit.x < obj2.position.x + obj2.size.x) {\n        if (t >= 0) t1 = t;\n      }\n    }\n\n    if (oldPos.x >= obj2.position.x + obj2.size.x) {\n      // Check for intersection on right vert line\n      var right = obj2.position.x + obj2.size.x; // Right side of obstacle\n\n      var dir = obj1.velocity.normalize(); // Direction of the movement\n      // The distance from oldPos to the collision point\n\n      var t = (right - oldPos.x) / dir.x; // Collision point\n\n      var hit = oldPos.add(dir.mul(t)); // Make sure the collision happens on the y axis\n\n      if (hit.y > obj2.position.y - obj1.size.y && hit.y < obj2.position.y + obj2.size.y) {\n        if (t >= 0) t2 = t;\n      }\n    } else if (oldPos.x + obj1.size.x <= obj2.position.x) {\n      // Check for intersection on left vert line\n      var left = obj2.position.x; // left side of obstacle\n\n      var dir = obj1.velocity.normalize(); // Direction of the movement\n      // The distance from oldPos to the collision point\n\n      var t = (left - (oldPos.x + obj1.size.x)) / dir.x; // Collision point\n\n      var hit = oldPos.add(dir.mul(t)); // Make sure the collision happens on the y axis\n\n      if (hit.y > obj2.position.y - obj1.size.y && hit.y < obj2.position.y + obj2.size.y) {\n        if (t >= 0) t2 = t;\n      }\n    }\n  }\n\n  obj1.position = oldPos;\n\n  if ((t1 < t2 || t2 == undefined) && t1 != undefined) {\n    return {\n      t: t1,\n      ax: true\n    };\n  } else if (t2 != undefined) {\n    return {\n      t: t2,\n      ax: false\n    };\n  }\n\n  return {\n    t: -1,\n    ax: false\n  };\n}","map":{"version":3,"sources":["/Users/mrinalvig/Documents/Projects/Portfolio/src/Physics.js"],"names":["collides","obj1","obj2","position","x","size","y","phys","deltaTime","oldPos","vel","velocity","mul","add","t1","t2","bottom","dir","normalize","t","hit","top","right","left","undefined","ax"],"mappings":"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","sourcesContent":["// Just checks for collision between two objects\nfunction collides(obj1, obj2) {\n    if (obj1.position.x < obj2.position.x + obj2.size.x &&\n        obj1.position.x + obj1.size.x > obj2.position.x &&\n        obj1.position.y < obj2.position.y + obj2.size.y &&\n        obj1.size.y + obj1.position.y > obj2.position.y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction phys(obj1, obj2, deltaTime) {\n    // obj1 is the moving object\n\n    // Save the position before moving it\n    var oldPos = obj1.position;\n\n    // The amount to move this frame\n    var vel = obj1.velocity.mul(deltaTime);\n\n    // Move the objects\n    obj1.position = obj1.position.add(vel);\n\n    var t1, t2;\n    // Check for collision this frame\n    if (collides(obj1, obj2)) {\n        if (oldPos.y >= obj2.position.y + obj2.size.y) {\n            // Check for intersection on lower horiz line\n            var bottom = obj2.position.y + obj2.size.y; // Bottom of obstacle\n            var dir = obj1.velocity.normalize(); // Direction of the movement\n\n            // The distance from oldPos to the collision point\n            var t = (bottom - oldPos.y) / dir.y;\n\n            // Collision point\n            var hit = oldPos.add(dir.mul(t));\n\n            // Make sure the collision happens on the x axis\n            if (hit.x > obj2.position.x - obj1.size.x &&\n            hit.x < obj2.position.x + obj2.size.x) {\n                if (t >= 0) t1 = t;\n            }\n        } else if (oldPos.y + obj1.size.y <= obj2.position.y) {\n            //if(obj1 == player) console.log(\"down\");\n            // Check for intersection on upper horiz line\n            var top = obj2.position.y; // top of obstacle\n            var dir = obj1.velocity.normalize(); // Direction of the movement\n\n            // The distance from oldPos to the collision point\n            var t = (top - (oldPos.y + obj1.size.y)) / dir.y;\n\n            // Collision point\n            var hit = oldPos.add(dir.mul(t));\n\n            // Make sure the collision happens on the x axis\n            if (hit.x > obj2.position.x - obj1.size.x &&\n            hit.x < obj2.position.x + obj2.size.x) {\n                if (t >= 0) t1 = t;\n            }\n        }\n\n\n        if (oldPos.x >= obj2.position.x + obj2.size.x) {\n            // Check for intersection on right vert line\n            var right = obj2.position.x + obj2.size.x; // Right side of obstacle\n            var dir = obj1.velocity.normalize(); // Direction of the movement\n\n            // The distance from oldPos to the collision point\n            var t = (right - oldPos.x) / dir.x;\n\n            // Collision point\n            var hit = oldPos.add(dir.mul(t));\n\n            // Make sure the collision happens on the y axis\n            if (hit.y > obj2.position.y - obj1.size.y &&\n            hit.y < obj2.position.y + obj2.size.y) {\n                if (t >= 0) t2 = t;\n            }\n        } else if (oldPos.x + obj1.size.x <= obj2.position.x) {\n            // Check for intersection on left vert line\n            var left = obj2.position.x; // left side of obstacle\n            var dir = obj1.velocity.normalize(); // Direction of the movement\n\n            // The distance from oldPos to the collision point\n            var t = (left - (oldPos.x + obj1.size.x)) / dir.x;\n\n            // Collision point\n            var hit = oldPos.add(dir.mul(t));\n\n            // Make sure the collision happens on the y axis\n            if (hit.y > obj2.position.y - obj1.size.y &&\n            hit.y < obj2.position.y + obj2.size.y) {\n                if (t >= 0) t2 = t;\n            }\n        }\n    }\n\n    obj1.position = oldPos;\n    if((t1 < t2 || t2 == undefined) && t1 != undefined) {\n        return {t: t1, ax: true};\n    } else if (t2 != undefined) {\n        return {t: t2, ax: false};\n    }\n\n    return {t: -1, ax: false};\n}\n"]},"metadata":{},"sourceType":"module"}