{"ast":null,"code":"// Vector2 Class\n// This class is just a x-y point\n// It can be used to represent a 2D point, 2D object dimensions, 2D velocity, etc\nfunction Vector2(x, y) {\n  this.x = x;\n  this.y = y;\n} // Add to a Vector2\n// Usage: vecA.add(vecB) OR vecA.add(0, 0)\n\n\n_c = Vector2;\n\nVector2.prototype.add = function (first, second) {\n  if (typeof second !== \"undefined\") {\n    // If there is a second arg then just use the args as x and y\n    return new Vector2(this.x + first, this.y + second);\n  } else {\n    // Otherwise assume the first argument is another vector\n    return new Vector2(this.x + first.x, this.y + first.y);\n  }\n}; // Subtract from a Vector2\n// Usage: vecA.sub(vecB) OR vecA.sub(0, 0)\n\n\nVector2.prototype.sub = function (first, second) {\n  if (typeof second !== \"undefined\") {\n    // If there is a second arg then just use the args as x and y\n    return new Vector2(this.x - first, this.y - second);\n  } else {\n    // Otherwise assume the first argument is another vector\n    return new Vector2(this.x - first.x, this.y - first.y);\n  }\n}; // Get the negation of a vector\n\n\nVector2.prototype.neg = function () {\n  return new Vector2(-this.x, -this.y);\n}; // Multiply a vectors components by a scalar\n\n\nVector2.prototype.mul = function (scalar) {\n  return new Vector2(this.x * scalar, this.y * scalar);\n}; // Get the magnitude (length) of a vector\n\n\nVector2.prototype.magnitude = function () {\n  return Math.sqrt(this.x * this.x + this.y * this.y);\n}; // Get the distance between two vectors\n\n\nVector2.prototype.distance = function (other) {\n  return this.sub(other).magnitude();\n}; // Get the normalized vector, I.E. the equivalent vector with length 1\n\n\nVector2.prototype.normalize = function () {\n  var mag = this.magnitude();\n\n  if (mag === 0) {\n    // If the magnitude is 0 we can't normalize\n    return this;\n  } else {\n    return new Vector2(this.x / mag, this.y / mag);\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Vector2\");","map":{"version":3,"sources":["/Users/mrinalvig/Documents/Projects/Portfolio/src/Vector2.js"],"names":["Vector2","x","y","prototype","add","first","second","sub","neg","mul","scalar","magnitude","Math","sqrt","distance","other","normalize","mag"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AAClB,OAAKD,CAAL,GAASA,CAAT;AACA,OAAKC,CAAL,GAASA,CAAT;AACJ,C,CAED;AACA;;;KANSF,O;;AAOTA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,GAAwB,UAASC,KAAT,EAAgBC,MAAhB,EAAwB;AAC3C,MAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC;AAC9B;AACA,WAAO,IAAIN,OAAJ,CAAY,KAAKC,CAAL,GAASI,KAArB,EAA4B,KAAKH,CAAL,GAASI,MAArC,CAAP;AACJ,GAHD,MAGO;AACF;AACA,WAAO,IAAIN,OAAJ,CAAY,KAAKC,CAAL,GAASI,KAAK,CAACJ,CAA3B,EAA8B,KAAKC,CAAL,GAASG,KAAK,CAACH,CAA7C,CAAP;AACJ;AACL,CARD,C,CAUA;AACA;;;AACAF,OAAO,CAACG,SAAR,CAAkBI,GAAlB,GAAwB,UAASF,KAAT,EAAgBC,MAAhB,EAAwB;AAC3C,MAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC;AAC9B;AACA,WAAO,IAAIN,OAAJ,CAAY,KAAKC,CAAL,GAASI,KAArB,EAA4B,KAAKH,CAAL,GAASI,MAArC,CAAP;AACJ,GAHD,MAGO;AACF;AACA,WAAO,IAAIN,OAAJ,CAAY,KAAKC,CAAL,GAASI,KAAK,CAACJ,CAA3B,EAA8B,KAAKC,CAAL,GAASG,KAAK,CAACH,CAA7C,CAAP;AACJ;AACL,CARD,C,CAUA;;;AACAF,OAAO,CAACG,SAAR,CAAkBK,GAAlB,GAAwB,YAAW;AAC9B,SAAO,IAAIR,OAAJ,CAAY,CAAC,KAAKC,CAAlB,EAAqB,CAAC,KAAKC,CAA3B,CAAP;AACJ,CAFD,C,CAIA;;;AACAF,OAAO,CAACG,SAAR,CAAkBM,GAAlB,GAAwB,UAASC,MAAT,EAAiB;AACpC,SAAO,IAAIV,OAAJ,CAAY,KAAKC,CAAL,GAASS,MAArB,EAA6B,KAAKR,CAAL,GAASQ,MAAtC,CAAP;AACJ,CAFD,C,CAIA;;;AACAV,OAAO,CAACG,SAAR,CAAkBQ,SAAlB,GAA8B,YAAW;AACpC,SAAOC,IAAI,CAACC,IAAL,CAAU,KAAKZ,CAAL,GAAS,KAAKA,CAAd,GAAkB,KAAKC,CAAL,GAAS,KAAKA,CAA1C,CAAP;AACJ,CAFD,C,CAIA;;;AACAF,OAAO,CAACG,SAAR,CAAkBW,QAAlB,GAA6B,UAASC,KAAT,EAAgB;AACxC,SAAO,KAAKR,GAAL,CAASQ,KAAT,EAAgBJ,SAAhB,EAAP;AACJ,CAFD,C,CAIA;;;AACAX,OAAO,CAACG,SAAR,CAAkBa,SAAlB,GAA8B,YAAW;AACpC,MAAIC,GAAG,GAAG,KAAKN,SAAL,EAAV;;AACA,MAAIM,GAAG,KAAK,CAAZ,EAAe;AACV;AACA,WAAO,IAAP;AACJ,GAHD,MAGO;AACF,WAAO,IAAIjB,OAAJ,CAAY,KAAKC,CAAL,GAASgB,GAArB,EAA0B,KAAKf,CAAL,GAASe,GAAnC,CAAP;AACJ;AACL,CARD","sourcesContent":["// Vector2 Class\n// This class is just a x-y point\n// It can be used to represent a 2D point, 2D object dimensions, 2D velocity, etc\nfunction Vector2(x, y) {\n     this.x = x;\n     this.y = y;\n}\n\n// Add to a Vector2\n// Usage: vecA.add(vecB) OR vecA.add(0, 0)\nVector2.prototype.add = function(first, second) {\n     if (typeof second !== \"undefined\") {\n          // If there is a second arg then just use the args as x and y\n          return new Vector2(this.x + first, this.y + second);\n     } else {\n          // Otherwise assume the first argument is another vector\n          return new Vector2(this.x + first.x, this.y + first.y);\n     }\n};\n\n// Subtract from a Vector2\n// Usage: vecA.sub(vecB) OR vecA.sub(0, 0)\nVector2.prototype.sub = function(first, second) {\n     if (typeof second !== \"undefined\") {\n          // If there is a second arg then just use the args as x and y\n          return new Vector2(this.x - first, this.y - second);\n     } else {\n          // Otherwise assume the first argument is another vector\n          return new Vector2(this.x - first.x, this.y - first.y);\n     }\n};\n\n// Get the negation of a vector\nVector2.prototype.neg = function() {\n     return new Vector2(-this.x, -this.y);\n}\n\n// Multiply a vectors components by a scalar\nVector2.prototype.mul = function(scalar) {\n     return new Vector2(this.x * scalar, this.y * scalar);\n};\n\n// Get the magnitude (length) of a vector\nVector2.prototype.magnitude = function() {\n     return Math.sqrt(this.x * this.x + this.y * this.y);\n};\n\n// Get the distance between two vectors\nVector2.prototype.distance = function(other) {\n     return this.sub(other).magnitude();\n};\n\n// Get the normalized vector, I.E. the equivalent vector with length 1\nVector2.prototype.normalize = function() {\n     var mag = this.magnitude();\n     if (mag === 0) {\n          // If the magnitude is 0 we can't normalize\n          return this;\n     } else {\n          return new Vector2(this.x / mag, this.y / mag);\n     }\n}\n"]},"metadata":{},"sourceType":"module"}